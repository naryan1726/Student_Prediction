# Deploying a Fine-Tuned LLM for User Access: Step-by-Step

Here's a straightforward process for deploying your fine-tuned Azure OpenAI model so users can interact with it:

## Step 1: Deploy the Fine-Tuned Model in Azure OpenAI

1. Go to Azure Portal and navigate to your Azure OpenAI resource
2. Click on "Azure OpenAI Studio" to open the studio interface
3. In the left sidebar, select "Deployments"
4. Click "Create new deployment"
5. Choose your fine-tuned model from the dropdown list
6. Give your deployment a name (e.g., "georgia-law-model")
7. Set appropriate capacity limits based on expected usage
8. Click "Create" to deploy the model

## Step 2: Create an API Backend

1. Go to Azure Portal and create a new Azure Function App
2. Select your subscription and resource group
3. Choose a function name (e.g., "georgia-law-api")
4. Select runtime stack (Python, Node.js, etc.)
5. Choose region and hosting plan
6. Create the Function App

## Step 3: Add Configuration Settings

1. In your Function App, go to "Configuration"
2. Add these application settings:
   - `AZURE_OPENAI_KEY`: Your Azure OpenAI API key
   - `AZURE_OPENAI_ENDPOINT`: Your endpoint URL (e.g., https://your-resource.openai.azure.com/)
   - `DEPLOYMENT_NAME`: The name you chose for your model deployment
3. Save the settings

## Step 4: Create the API Function

1. In your Function App, click "Functions" in the sidebar
2. Click "Create" to add a new function
3. Select "HTTP trigger" template
4. Name your function (e.g., "ChatFunction")
5. Set authorization level to "Function" or "Anonymous" based on your security needs
6. Create and then add the following code:

For Python:
```python
import azure.functions as func
import openai
import os
import json

def main(req: func.HttpRequest) -> func.HttpResponse:
    # Get question from request
    try:
        req_body = req.get_json()
        question = req_body.get('question')
    except:
        return func.HttpResponse("Please pass a question in the request body", status_code=400)
    
    # Configure OpenAI
    openai.api_type = "azure"
    openai.api_key = os.environ["AZURE_OPENAI_KEY"]
    openai.api_base = os.environ["AZURE_OPENAI_ENDPOINT"]
    openai.api_version = "2023-07-01-preview"
    
    # Call the model
    try:
        response = openai.ChatCompletion.create(
            deployment_id=os.environ["DEPLOYMENT_NAME"],
            messages=[
                {"role": "system", "content": "You are a helpful assistant specializing in Georgia law."},
                {"role": "user", "content": question}
            ],
            temperature=0.3,
            max_tokens=800
        )
        
        answer = response.choices[0].message.content
        return func.HttpResponse(json.dumps({"answer": answer}), mimetype="application/json")
    except Exception as e:
        return func.HttpResponse(f"Error: {str(e)}", status_code=500)
```

## Step 5: Create a Simple Web Interface

1. Go to Azure Portal and create a new Web App
2. Select your subscription and resource group
3. Name your Web App (e.g., "georgia-law-chatbot")
4. Choose runtime stack (Node.js, .NET, etc.)
5. Select region and plan
6. Create the Web App

## Step 6: Deploy the Frontend Code

Create an HTML file with the following basic interface and deploy it to your Web App:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Georgia Law Assistant</title>
    <style>
        body { font-family: Arial; max-width: 800px; margin: 0 auto; padding: 20px; }
        #chat-box { height: 400px; border: 1px solid #ccc; overflow-y: auto; padding: 10px; margin-bottom: 10px; }
        #question { width: 80%; padding: 8px; }
        button { padding: 8px 16px; background: #0078d4; color: white; border: none; }
        .user { text-align: right; margin: 5px 0; }
        .bot { background: #f1f1f1; padding: 8px; border-radius: 5px; margin: 5px 0; }
    </style>
</head>
<body>
    <h1>Georgia Law Assistant</h1>
    <div id="chat-box"></div>
    <div>
        <input type="text" id="question" placeholder="Ask a question about Georgia law...">
        <button onclick="askQuestion()">Send</button>
    </div>
    <p><small>Disclaimer: This provides information about Georgia law but is not legal advice.</small></p>

    <script>
        const chatBox = document.getElementById('chat-box');
        const questionInput = document.getElementById('question');
        
        async function askQuestion() {
            const question = questionInput.value.trim();
            if (!question) return;
            
            // Add user question to chat
            addMessage(question, 'user');
            questionInput.value = '';
            
            // Add loading message
            const loadingMsg = addMessage('Thinking...', 'bot');
            
            try {
                // Call your Azure Function
                const response = await fetch('YOUR_FUNCTION_URL', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ question: question })
                });
                
                const data = await response.json();
                
                // Remove loading message
                chatBox.removeChild(loadingMsg);
                
                // Add bot response
                addMessage(data.answer, 'bot');
            } catch (error) {
                chatBox.removeChild(loadingMsg);
                addMessage('Sorry, I encountered an error. Please try again.', 'bot');
            }
        }
        
        function addMessage(text, sender) {
            const message = document.createElement('div');
            message.className = sender;
            message.textContent = text;
            chatBox.appendChild(message);
            chatBox.scrollTop = chatBox.scrollHeight;
            return message;
        }
        
        // Allow Enter key to send message
        questionInput.addEventListener('keyup', function(event) {
            if (event.key === 'Enter') askQuestion();
        });
    </script>
</body>
</html>
```

Make sure to replace `'YOUR_FUNCTION_URL'` with your actual Azure Function URL.

## Step 7: Connect Frontend to Backend

1. Get your Function URL:
   - Go to your Function App
   - Select your HTTP trigger function
   - Click "Get Function URL" and copy it
2. In your HTML file, replace `'YOUR_FUNCTION_URL'` with the copied URL
3. Deploy the updated HTML to your Web App

## Step 8: Configure CORS (Cross-Origin Resource Sharing)

1. In your Function App, go to "CORS"
2. Add your Web App URL to the allowed origins
3. Check "Enable Access-Control-Allow-Credentials"
4. Save the configuration

## Step 9: Test the Complete System

1. Navigate to your Web App URL
2. Test asking different questions about Georgia law
3. Verify that responses are coming from your fine-tuned model
4. Check that the interface is responsive and user-friendly

## Step 10: Monitor and Scale (Optional)

1. Set up Application Insights for monitoring
2. Configure auto-scaling if you expect high traffic
3. Implement logging for queries and responses
4. Create a feedback mechanism for ongoing improvements

This approach gives you a complete deployment pipeline from your fine-tuned model to a user-accessible web interface, all within the Azure ecosystem.
